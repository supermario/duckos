#!/bin/sh

# set -x

# if [[ $(id -un) != "root" ]]; then
#   sudo -u root -H $0 "$@"
#   exit
# fi

# We need at least one argument
if [ $# -lt 1 ]
  then $0 "help"
  exit 1
fi

duck_tmp="$HOME/.duck"
[[ -d $duck_tmp ]] || mkdir $duck_tmp
duckos_latest="http://localhost/duckos/duckos-rpi.img.gz"
duckos_img=$duck_tmp/duckos-rpi.img.gz

case "$1" in
  write)
    # Ensure we have a copy of duckos
    if [[ -f $duckos_img ]]
      then echo "---> Using $duckos_img"
      else echo "---> Downloading latest DuckOS..."
        curl $duckos_latest -o $duckos_img
    fi

    read -r -p "Select disk device (data will be destroyed): " disk_device

    # ensure our device is unmounted
    for filesystem in `ls -1 $disk_device?*`; do
        sudo umount -f $filesystem
    done

    sudo -p "Sudo password: " umount -f $disk_device

    echo "---> Writing DuckOS to $disk_device..."

    # write disk image to device
    ./bar -c 'gunzip -c' $duckos_img | sudo dd of=$disk_device

    echo "---> DuckOS install complete!"

    ;;

  find)
    echo "---> Seeking ducks, please be patient..."
    # Default handshaker port
    quacker_port=10002
    # Get a broadcast range
    broadcast_range=$(ping -c2 255.255.255.255 | grep "64 bytes" | cut -d' ' -f4 | sort | uniq | cut -d':' -f1)
    for ip in $broadcast_range;
    do
      # Get curl response
      response=$(curl -m1 --connect-timeout 2 $ip:$quacker_port 2>&1)
      response_code=$?
      case $response_code in
        56 )
            echo "Quack! DuckOS detected on IP: "$ip
        ;;
      esac
    done
    ;;

  help)
    cat<<EOF
    write           Writes DuckOS onto a present SD Card / USB Drive
    find            Searches for DuckOS hosts on the current network
    help            Prints the list of commands
EOF
    ;;

  *)
    ;;

esac

